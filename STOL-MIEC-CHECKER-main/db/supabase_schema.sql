create extension if not exists "pgcrypto";
create table if not exists public.hin_validations (id uuid primary key default gen_random_uuid(),created_at timestamptz default now(),user_id uuid references auth.users(id) on delete set null,user_email text,hin text not null,result_ok boolean not null,details jsonb,pre1998 boolean default false,cert boolean default false,cert_number text,cert_issuer text,photo_url text);
create table if not exists public.engine_validations (id uuid primary key default gen_random_uuid(),created_at timestamptz default now(),user_id uuid references auth.users(id) on delete set null,user_email text,brand text not null,payload jsonb not null,result_ok boolean not null,details jsonb,photo_url text);
alter table public.hin_validations enable row level security;alter table public.engine_validations enable row level security;
create policy if not exists "read all (auth)" on public.hin_validations for select to authenticated using (true);
create policy if not exists "insert own" on public.hin_validations for insert to authenticated with check (auth.uid() = user_id);
create policy if not exists "read all (auth) motors" on public.engine_validations for select to authenticated using (true);
create policy if not exists "insert own motors" on public.engine_validations for insert to authenticated with check (auth.uid() = user_id);
insert into storage.buckets (id,name,public) values ('photos','photos',true) on conflict do nothing;
create policy if not exists "public read" on storage.objects for select using (bucket_id='photos');
create policy if not exists "auth write" on storage.objects for insert to authenticated with check (bucket_id='photos');